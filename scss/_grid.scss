// Variáveis do grid
$cols: 12;
$gutter: 20px;
$l-device: 1200px;
$m-device: 760px;
$s-device: 480px;

//Box-sizing
*,
*::after,
*::before {
  //Para garantir que a largura total seja o que defini no width e respeite totalmente nosso grid
  box-sizing: border-box;
}

//Mixin de media-querie
@mixin d($size) {
  @if $size == l {
    @media screen and (min-width: #{$l-device}) {
      @content;
    }
  } @else if $size == m {
    //760px de min e 1199px de max
    @media screen and (min-width: #{$m-device}) and (max-width: #{$l-device - 1}) {
      @content;
    }
  } @else if $size == s {
    @media screen and (max-width: #{$m-device - 1}) {
      @content;
    }
  }
}

// Função do grid

//offset é o deslocamento para direita + 10px
@function grid($col, $offset: false) {
  //cuidado, pois há agora o operador de módulo % no sass
  //exemplo abaixo: grid 4 / 12 = 0,333333 * 100 = 33,3333%
  $width: $col / $cols * 100 + "%";
  $result: calc(#{$width} - #{$gutter});
  @if $offset == offset {
    $gutter: $gutter / 2;
    $result: calc(#{$width} + #{$gutter});
  }
  @return $result;
}

//Gera as classes de grid
@for $i from 1 through $cols {
  .grid-#{$i} {
    width: grid($i);
  }
}

//Mixin estrutura de grid
@mixin grid-structure {
  float: left;
  min-height: 1px;
  margin-left: $gutter / 2;
  margin-right: $gutter / 2;
  @include d(s) {
    //vira única coluna no small
    width: 100%;
    float: none;
    margin-left: 0px;
    margin-right: 0px;
  }
}

//seletor especial com ^ para selecionar todas as classes que começam com "grid-"
//aqui é para evitar criar aquele .grid-1,.grid-2,.grid-3...
[class^="grid-"] {
  @include grid-structure;
}

//Gera as classes de offset
@for $i from 1 through $cols {
  .offset-#{$i} {
    margin-left: grid($i, offset);
    @extend %offset;
  }
}

@include d(s) {
  //o offset precisa sumir quando vai para o mobile
  %offset {
    margin-left: 0px;
  }
}

//Mixin de clearfix
@mixin clearfix {
  &::after,
  &::before {
    content: "";
    display: table;
    clear: both;
  }
}

//Mixin container
@mixin container {
  max-width: $l-device;
  margin: 0px auto;
  position: relative;
  @include d(m) {
    //breakpoint 1 -> comente abaixo para manter flexível
    max-width: $m-device;
  }
  @include d(s) {
    //breakpoint 2 -> comente abaixo para manter flexível
    max-width: $s-device;
    padding-left: 10px;
    padding-right: 10px;
  }
  @include clearfix;
}

.container {
  @include container;
}

/*
O row serve para quando tenho elemento dentro de elemento e preciso que a margem
se mantenha exata para todos os elementos daquela linha, mesmo existindo elementos
aninhados em outros
*/
@mixin row {
  position: relative;
  margin-left: -$gutter / 2;
  margin-right: -$gutter / 2;
  @include d(s) {
    margin-left: 0px;
    margin-right: 0px;
  }
  @include clearfix;
}

.row {
  @include row;
}
